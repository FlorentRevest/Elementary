enum Elm.Scroller.Policy
{
   /*@
     @brief Type that controls when scrollbars should appear.
     @see elm_scroller_policy_set()

     @ingroup Scroller
    */
   auto = 0, /*@< Show scrollbars as needed */
   on, /*@< Always show scrollbars */
   off, /*@< Never show scrollbars */
   last
}

enum Elm.Scroller.Single_Direction
{
   /*@
      @brief Type that controls how the content is scrolled.

      @see elm_scroller_single_direction_set()
      @ingroup Scroller
    */
   none = 0, /*@< Scroll every direction */
   soft, /*@< Scroll single direction if the direction is certain*/
   hard, /*@< Scroll only single direction */
   last
}

enum Elm.Scroller.Movement_Block
{
   /*@
      @brief Type that blocks the scroll movement in one or more direction.

      @see elm_scroller_movement_block()

      @since 1.8
      @ingroup Scroller
    */
    legacy: elm_scroller_movement;
    no_block = 1 << 0, /*@< Do not block movements */
    block_vertical = 1 << 1, /*@< Block vertical movements */
    block_horizontal = 1 << 2 /*@< Block horizontal movements */
}

class Elm.Scroller (Elm.Layout, Elm_Interface_Scrollable,
                    Elm_Interface_Atspi_Widget_Action)
{
   eo_prefix: elm_obj_scroller;
   methods {
      @property propagate_events {
         set {
            /*@
            @brief Set event propagation on a scroller

            This enables or disables event propagation from the scroller
            content to the scroller and its parent. By default event
            propagation is @b enabled.

            @ingroup Scroller */
         }
         get {
            /*@
            @brief Get event propagation for a scroller

            @return The propagation state

            This gets the event propagation for a scroller.

            @see elm_scroller_propagate_events_set()

            @ingroup Scroller */
         }
         values {
            bool propagation; /*@ If propagation is enabled or not */
         }
      }
      @property custom_widget_base_theme {
         set {
            /*@ Set custom theme elements for the scroller */
         }
         values {
            const(char)* klass;
            const(char)* group;
         }
      }
      page_scroll_limit_set @const {
         /*@
         @brief Set the maximum of the movable page at a flicking.

         The value of maximum movable page should be more than 1.

         @see elm_scroller_page_scroll_limit_get()

         @since 1.8

         @ingroup Scroller */
         params {
            @in int page_limit_h; /*@ The maximum of the movable horizontal page */
            @in int page_limit_v; /*@ The maximum of the movable vertical page */
         }
      }
      page_scroll_limit_get @const {
         /*@
         @brief Get the maximum of the movable page at a flicking.

         @see elm_scroller_page_scroll_limit_set()

         @since 1.8

         @ingroup Scroller */
         params {
            @in int *page_limit_h; /*@ The maximum of the movable horizontal page */
            @in int *page_limit_v; /*@ The maximum of the movable vertical page */
         }
      }
   }
   implements {
      class.constructor;
      Eo.Base.constructor;
      Evas.Object_Smart.move;
      Evas.Object_Smart.add;
      Evas.Object_Smart.member_add;
      Evas.Object_Smart.resize;
      Elm.Widget.theme_apply;
      Elm.Widget.activate;
      Elm.Widget.focus_next_manager_is;
      Elm.Widget.focus_direction_manager_is;
      Elm.Widget.focus_next;
      Elm.Widget.sub_object_del;
      Elm.Widget.event;
      Elm.Container.content_get;
      Elm.Container.content_set;
      Elm.Container.content_unset;
      Elm.Layout.sizing_eval;
      Elm_Interface_Scrollable.page_size.set;
      Elm_Interface_Scrollable.policy.set;
      Elm_Interface_Scrollable.single_direction;
      Elm_Interface_Atspi_Widget_Action.elm_actions.get;
   }
   events {
      focused;
      unfocused;
   }

}
