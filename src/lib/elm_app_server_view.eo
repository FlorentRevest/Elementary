class Elm_App_Server_View (Eo.Base)
{
   legacy_prefix: null;
   eo_prefix: elm_app_server_view;
   methods {
      @property progress {
         set {
         }
         get {
         }
         values {
            short progress;
         }
      }
      @property new_events {
         set {
         }
         get {
         }
         values {
            int events;
         }
      }
      @property icon {
         set {
         }
         get {
         }
         values {
            const(char)* icon;
         }
      }
      @property title {
         set {
         }
         get {
         }
         values {
            const(char)* title @nullable;
         }
      }
      @property window {
         set {
         }
         values {
            Evas_Object *win;
         }
      }
      @property id {
         get {
         }
         values {
            Eina_Stringshare *ret;
         }
      }
      @property state {
         get {
         }
         values {
            Elm_App_View_State ret;
         }
      }
      @property path {
         get {
         }
         values {
            const(char)* ret;
         }
      }
      @property pixels {
         get {
            /*@ Get application raw icon. */
         }
         set {
            /*@ Set icon to application, using the raw pixels of image. */
         }
         values {
            uint w;
            uint h;
            bool has_alpha;
            const(ubyte)* pixels;
         }
      }
      constructor {
         /*@ Class constructor of elm_app_server_view */
         legacy: null;
         params {
            @in const(char)* id @nullable; /*@ identifier of view */
         }
      }
      pause {
      }
      resume {
      }
      shallow {
      }
      close {
      }
   }
   implements {
      Eo.Base.constructor;
      Eo.Base.destructor;
   }
   constructors {
      .constructor;
   }
   events {
      resumed; /*@ Called when view must be resumed */
      paused; /*@ Called when view must be paused */
      closed; /*@ Called when view must be closed */
      shallow; /*@ Called when view state is set to shallow */
      save; /*@ Called when view state should be saved */
   }

}
