#define ELM_OBJ_THUMB_CLASS elm_obj_thumb_class_get()

const Eo_Class *elm_obj_thumb_class_get(void) EINA_CONST;

extern EAPI Eo_Op ELM_OBJ_THUMB_BASE_ID;

enum
{
   ELM_OBJ_THUMB_SUB_ID_RELOAD,
   ELM_OBJ_THUMB_SUB_ID_FILE_SET,
   ELM_OBJ_THUMB_SUB_ID_FILE_GET,
   ELM_OBJ_THUMB_SUB_ID_PATH_GET,
   ELM_OBJ_THUMB_SUB_ID_ANIMATE_SET,
   ELM_OBJ_THUMB_SUB_ID_ANIMATE_GET,
   ELM_OBJ_THUMB_SUB_ID_EDITABLE_SET,
   ELM_OBJ_THUMB_SUB_ID_EDITABLE_GET,
   ELM_OBJ_THUMB_SUB_ID_LAST
};

#define ELM_OBJ_THUMB_ID(sub_id) (ELM_OBJ_THUMB_BASE_ID + sub_id)


/**
 * @def elm_obj_thumb_reload
 * @since 1.8
 *
 * Reload thumbnail if it was generated before.
 *
 *
 * @see elm_thumb_reload
 *
 * @ingroup Thumb
 */
#define elm_obj_thumb_reload() ELM_OBJ_THUMB_ID(ELM_OBJ_THUMB_SUB_ID_RELOAD)

/**
 * @def elm_obj_thumb_file_set
 * @since 1.8
 *
 * Set the file that will be used as thumbnail source.
 *
 * @param[in] file
 * @param[in] key
 *
 * @see elm_thumb_file_set
 *
 * @ingroup Thumb
 */
#define elm_obj_thumb_file_set(file, key) ELM_OBJ_THUMB_ID(ELM_OBJ_THUMB_SUB_ID_FILE_SET), EO_TYPECHECK(const char *, file), EO_TYPECHECK(const char *, key)

/**
 * @def elm_obj_thumb_file_get
 * @since 1.8
 *
 * Get the image or video path and key used to generate the thumbnail.
 *
 * @param[out] file
 * @param[out] key
 *
 * @see elm_thumb_file_get
 *
 * @ingroup Thumb
 */
#define elm_obj_thumb_file_get(file, key) ELM_OBJ_THUMB_ID(ELM_OBJ_THUMB_SUB_ID_FILE_GET), EO_TYPECHECK(const char **, file), EO_TYPECHECK(const char **, key)

/**
 * @def elm_obj_thumb_path_get
 * @since 1.8
 *
 * Get the path and key to the image or video thumbnail generated by ethumb.
 *
 * @param[out] file
 * @param[out] key
 *
 * @see elm_thumb_path_get
 *
 * @ingroup Thumb
 */
#define elm_obj_thumb_path_get(file, key) ELM_OBJ_THUMB_ID(ELM_OBJ_THUMB_SUB_ID_PATH_GET), EO_TYPECHECK(const char **, file), EO_TYPECHECK(const char **, key)

/**
 * @def elm_obj_thumb_animate_set
 * @since 1.8
 *
 * Set the animation state for the thumb object. If its content is an animated
 *
 * @param[in] setting
 *
 * @see elm_thumb_animate_set
 *
 * @ingroup Thumb
 */
#define elm_obj_thumb_animate_set(setting) ELM_OBJ_THUMB_ID(ELM_OBJ_THUMB_SUB_ID_ANIMATE_SET), EO_TYPECHECK(Elm_Thumb_Animation_Setting, setting)

/**
 * @def elm_obj_thumb_animate_get
 * @since 1.8
 *
 * Get the animation state for the thumb object.
 *
 * @param[out] ret
 *
 * @see elm_thumb_animate_get
 *
 * @ingroup Thumb
 */
#define elm_obj_thumb_animate_get(ret) ELM_OBJ_THUMB_ID(ELM_OBJ_THUMB_SUB_ID_ANIMATE_GET), EO_TYPECHECK(Elm_Thumb_Animation_Setting *, ret)

/**
 * @def elm_obj_thumb_editable_set
 * @since 1.8
 *
 * Make the thumbnail 'editable'.
 *
 * @param[in] edit
 * @param[out] ret
 *
 * @see elm_thumb_editable_set
 *
 * @ingroup Thumb
 */
#define elm_obj_thumb_editable_set(edit, ret) ELM_OBJ_THUMB_ID(ELM_OBJ_THUMB_SUB_ID_EDITABLE_SET), EO_TYPECHECK(Eina_Bool, edit), EO_TYPECHECK(Eina_Bool *, ret)

/**
 * @def elm_obj_thumb_editable_get
 * @since 1.8
 *
 * Make the thumbnail 'editable'.
 *
 * @param[out] ret
 *
 * @see elm_thumb_editable_get
 *
 * @ingroup Thumb
 */
#define elm_obj_thumb_editable_get(ret) ELM_OBJ_THUMB_ID(ELM_OBJ_THUMB_SUB_ID_EDITABLE_GET), EO_TYPECHECK(Eina_Bool *, ret)
